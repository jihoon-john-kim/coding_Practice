class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int[] ans = new int[nums1.length];
        Stack<Integer> stack = new Stack<>();
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int cur : nums2){
            while(!stack.isEmpty() && stack.peek()<cur){
                int tmp = stack.pop();
                map.put(tmp, cur);
            }
            stack.push(cur);
        }
        for(int i=0; i < nums1.length; i++){
            ans[i] = map.getOrDefault(nums1[i], -1);
        }
        return ans;
    }
}

/*
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        Stack<Integer> stack = new Stack<>();
        for(int i : nums2){
            stack.add(i);
        }
        int[] ans = new int[nums1.length];
        for(int i=0; i<nums1.length; i++){
            Stack<Integer> tmp = (Stack<Integer>) stack.clone();
            int nge = -1;            
            while(!tmp.isEmpty() && tmp.peek()!=nums1[i]){
                if(tmp.peek()>nums1[i]){
                    nge = tmp.peek();
                }
                tmp.pop();
            }
            ans[i] = nge;
        }
        return ans;
    }
}
*/
