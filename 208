class Trie {
    class Node {
        char val;
        boolean isEnd;
        Node[] children;
        Node(char val){
            this.val = val;
            this.isEnd = false;
            this.children = new Node[26];
        }
    }
    
    private Node dummy;
    
    public Trie() {
        dummy = new Node('\0');    
    }
    
    public void insert(String word) {
        Node cur = dummy;
        for(char c : word.toCharArray()){
            if(cur.children[c - 'a']==null){
                cur.children[c - 'a'] = new Node(c);
            }
            cur = cur.children[c - 'a'];
        }
        cur.isEnd = true;
    }
    
    public boolean search(String word) {        
        Node cur = dummy;
        for(char c : word.toCharArray()){
            if(cur.children[c - 'a']!=null){
                cur = cur.children[c - 'a'];
            }else{
                return false;
            }
        }
        return cur.isEnd;
    }
    
    public boolean startsWith(String prefix) {        
        Node cur = dummy;
        for(char c : prefix.toCharArray()){
            if(cur.children[c - 'a']!=null){
                cur = cur.children[c - 'a'];
            }else{
                return false;
            }
        }
        return true;
    }
}
