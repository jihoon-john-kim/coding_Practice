class Trie {
    private Node trie;

    public Trie() {
        trie = new Node('\0');
    }
    
    public void insert(String word) {
        Node cur = trie;
        for(char c : word.toCharArray()){
            if(cur.children[c-'a'] == null){
                cur.children[c-'a'] = new Node(c);
            }
            cur = cur.children[c-'a'];
        }
        cur.isEnd = true;
    }

    public Node getLast(String word) {
        Node cur = trie;
        for (char c : word.toCharArray()) {
            if (cur.children[c-'a'] == null) {
                return null;
            }
            cur = cur.children[c-'a'];
        }
        return cur;
    }

    public boolean search(String word) {
        Node cur = getLast(word);
        if(cur==null){
            return false;
        }
        return cur.isEnd;
    }
    
    public boolean startsWith(String prefix) {
        Node cur = getLast(prefix);
        if(cur==null){
            return false;
        }
        return true;
    }

    class Node {
        private char value;
        private boolean isEnd;
        private Node[] children;

        Node(char val) {
            this.value = val;
            this.isEnd = false;
            this.children = new Node[26];
        }
    }

}
